plugins {
    id 'java-library'
    id 'maven-publish'
    id 'signing'
    id 'idea'
}

group = 'io.github.mingzilla'
version = '1.0.0'

java {
    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17
    withJavadocJar()
    withSourcesJar()
}

repositories {
    mavenCentral()
    // Add Spring milestone repository for Spring AI
    maven { url 'https://repo.spring.io/milestone' }
    // Add snapshot repository
    maven { url 'https://repo.spring.io/snapshot' }
}

sourceSets {
    main {
        java {
            srcDirs = ['src/main/java']
        }
    }
    test {
        java {
            srcDirs = ['src/test/java']
        }
    }
}

ext {
    springAiVersion = '1.0.0-M6'
}

dependencies {
    // Existing dependencies
    implementation 'org.springframework:spring-webflux:5.3.27'
    implementation 'io.projectreactor.netty:reactor-netty-http:1.0.30'
    implementation 'com.fasterxml.jackson.core:jackson-databind:2.14.2'
    implementation 'io.projectreactor:reactor-core:3.5.6'
    
    // Spring AI dependencies (marked as optional so they're not transitive)
    compileOnly "org.springframework.ai:spring-ai-core:${springAiVersion}"
    compileOnly "org.springframework.ai:spring-ai-openai-spring-boot-starter:${springAiVersion}"
    
    // Testing dependencies
    testImplementation 'org.junit.jupiter:junit-jupiter:5.9.2'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher:1.9.2'
    testImplementation 'io.projectreactor:reactor-test:3.5.6'
    testImplementation 'com.squareup.okhttp3:mockwebserver:4.10.0'
    
    // Spring AI test dependencies
    testImplementation "org.springframework.ai:spring-ai-core:${springAiVersion}"
    testImplementation "org.springframework.ai:spring-ai-openai-spring-boot-starter:${springAiVersion}"
}

tasks.withType(Javadoc) {
    failOnError = false
}

test {
    useJUnitPlatform()
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
            
            pom.withXml {
                def root = asNode()
                root.appendNode('packaging', 'jar')
            }
            
            pom {
                name = 'LLM Client'
                description = 'A reactive Java client for LLM APIs with streaming support'
                url = 'https://github.com/mingzilla/llm-client'
                
                licenses {
                    license {
                        name = 'MIT License'
                        url = 'http://www.opensource.org/licenses/mit-license.php'
                    }
                }
                
                developers {
                    developer {
                        name = 'Ming Huang'
                        email = 'means789@gmail.com'
                        organization = 'Mingzilla Studio'
                        organizationUrl = 'https://github.com/mingzilla'
                    }
                }
                
                scm {
                    connection = 'scm:git:git://github.com/mingzilla/llm-client.git'
                    developerConnection = 'scm:git:ssh://github.com:mingzilla/llm-client.git'
                    url = 'https://github.com/mingzilla/llm-client/tree/main'
                }
            }
        }
    }
    
    repositories {
        // Only keep GitHub Packages repository
        maven {
            name = 'GitHubPackages'
            url = uri('https://maven.pkg.github.com/mingzilla/llm-client')
            credentials {
                username = project.findProperty('gpr.user') ?: System.getenv('GITHUB_ACTOR')
                password = project.findProperty('gpr.key') ?: System.getenv('GITHUB_TOKEN')
            }
        }
    }
}

signing {
    useGpgCmd()
    sign publishing.publications.mavenJava
}

// Add this at the end of the file
tasks.withType(PublishToMavenRepository) {
    dependsOn tasks.withType(Sign)
}

// Add this anywhere in your build.gradle
task printGithubCredentials {
    doLast {
        println "GitHub User: ${project.findProperty('gpr.user') ?: 'Not set'}"
        println "GitHub Token: ${project.findProperty('gpr.key') ?: 'Not set'}"
    }
}